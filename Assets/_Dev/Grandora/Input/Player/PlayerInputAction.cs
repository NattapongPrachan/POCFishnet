//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_Dev/Grandora/Input/Player/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""df38abb7-47ee-4cbb-81c5-9ae8aaf25cf6"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e0fdde24-6bf0-429a-990c-2475ff98b3a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDownRight"",
                    ""type"": ""Button"",
                    ""id"": ""e11e29c8-8d00-45d9-ab7c-65957386c5b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDownLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f348a866-ac42-4853-8876-9b83e9b21189"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftCombo"",
                    ""type"": ""Button"",
                    ""id"": ""afe89f98-ede8-4448-ba5e-5153d9b4299f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""32fb1481-2c10-4ba4-9443-1508ce41f8c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""ea4ee595-df17-4f9a-9755-c3b5218b0379"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speed"",
                    ""type"": ""Button"",
                    ""id"": ""3093ae29-088b-462d-8925-8ed55bc49745"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0b55fe0-19dd-4b39-a6c2-4ddda5c6641b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""MultiTap(tapTime=0.2,tapDelay=0.2,pressPoint=0.1),Hold(duration=0.2,pressPoint=0.1),Tap(duration=0.2,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""MouseDownRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88e067a5-acd0-440a-be91-459a3dc9abfd"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""Gamepad;Mouse"",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08fe78a9-bd4e-43a2-ab27-24eacc44fda7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""778b8b79-f547-44cf-9cc8-cd5b04efda73"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4e060d4b-8c6e-42b5-8814-79d17d5cf913"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""c119533b-65ab-4ffc-8d88-d407548a9fa6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""3337011e-6c61-49bd-8e99-7a466e4758cf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""969ae6b9-d1ec-4c01-9d52-861096fdb621"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""a88462c7-c9ab-4c12-99f3-d5d857f8d4e6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e0fccb5e-886e-48ff-aeed-165fb826770b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae25308f-6975-4b71-b75c-326ba1b9170f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Speed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0bafe1a-93e8-4a7d-b3a2-c150fc1016f8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""MouseDownLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd51cee8-c56b-48ea-87bc-2b96a29b3d91"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap(tapTime=0.2,tapDelay=0.2,pressPoint=0.1),Hold(duration=0.2,pressPoint=0.1),Tap(duration=0.2,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""MouseLeftCombo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerAction"",
            ""id"": ""0791b877-54d8-44cb-9ff7-5330d165edcd"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""14df05af-54cf-4646-81ee-269dab32dec1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sit"",
                    ""type"": ""Button"",
                    ""id"": ""1ab113e5-1fbf-4e5b-b772-9bf0fe989236"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""2e091f82-7434-4305-aebf-61ebd9b1a1a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Climb"",
                    ""type"": ""Button"",
                    ""id"": ""131c9c35-75cc-47e5-a796-b2b989f0f53c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db72f3fe-8a08-4aa3-8fd8-67bdb097868d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62b753ba-6562-4780-bbf9-6e78508163bf"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad"",
                    ""action"": ""Sit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfc42f1d-874f-4d38-a4ee-3dfdc46c0d6f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c282e57a-7ff1-4f7c-bbb2-ed9450314edd"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad"",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponAction"",
            ""id"": ""a081c606-e942-4962-8e3f-9898328b7e86"",
            ""actions"": [
                {
                    ""name"": ""RUnsheath"",
                    ""type"": ""Button"",
                    ""id"": ""4e1b6883-d38f-4d4c-ad06-ce0375a30f19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RSheath"",
                    ""type"": ""Button"",
                    ""id"": ""dfcb8959-6ab4-45e6-83c2-e285ad56dfbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LUnsheath"",
                    ""type"": ""Button"",
                    ""id"": ""a8dfa283-3da3-4aa7-9d0a-c1e7601bb674"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LSheath"",
                    ""type"": ""Button"",
                    ""id"": ""acdf99cc-65db-4959-beb0-b992ed9534a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e75993a-62e4-4e5e-ac46-6a2053c8e850"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RUnsheath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edf8201c-1f2b-48c7-9d27-06c590ee7a92"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RSheath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e3dbad7-7a47-4068-8a26-b20b85b7a0cb"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LUnsheath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a00ade8e-d8a2-47ca-b206-9207acb4b5b6"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LSheath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ItemSwitchAction"",
            ""id"": ""b8ed7440-4e34-4990-995d-48c5cfcb0218"",
            ""actions"": [
                {
                    ""name"": ""Slot1"",
                    ""type"": ""Button"",
                    ""id"": ""b9d68d6b-c5bc-4aa0-9250-59fbdb987a33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot2"",
                    ""type"": ""Button"",
                    ""id"": ""7d821517-d07e-4297-b476-97ea89003f40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot3"",
                    ""type"": ""Button"",
                    ""id"": ""b183e39f-4487-4781-ab23-7f2209a2acb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot4"",
                    ""type"": ""Button"",
                    ""id"": ""fa4d75ae-e43b-4865-82cc-827a13b31c33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slot5"",
                    ""type"": ""Button"",
                    ""id"": ""2bb55174-604a-4ae7-a57c-c76cd438e651"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0478f0fb-2056-4a3a-bc83-b019294f2d3a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Slot1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62c7c3ae-00d2-498b-882c-e931143b3db5"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Slot2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4334cecc-98e4-4ac6-94e1-3d6e8af9e3cb"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Slot3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""173fd251-2975-4757-b787-185fa32831ff"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Slot4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""602a5558-7fa7-4f01-a9de-b29e68bb46d6"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Slot5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerGamePad"",
            ""id"": ""c60f434e-f545-4c58-a5fa-9fe4a9ac026d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9b3782a9-ea3f-40ad-b4a0-697e19293221"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""e6fd0c81-eac3-436c-bb97-7d47256c432e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8e0a562-9afb-4a70-9316-cc6d1711465d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deb60a4e-f8e6-45b9-b230-ea2ee7550dbf"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerCursorAction"",
            ""id"": ""a9d67288-11c5-461a-9e65-0b8f5e7dec69"",
            ""actions"": [
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Button"",
                    ""id"": ""02f36151-ff3c-4d9d-8745-e4d752f43608"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d03b161-c3eb-4141-8d33-251a528d1979"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Mouse"",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<AndroidGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_MouseDownRight = m_Player.FindAction("MouseDownRight", throwIfNotFound: true);
        m_Player_MouseDownLeft = m_Player.FindAction("MouseDownLeft", throwIfNotFound: true);
        m_Player_MouseLeftCombo = m_Player.FindAction("MouseLeftCombo", throwIfNotFound: true);
        m_Player_MouseLook = m_Player.FindAction("MouseLook", throwIfNotFound: true);
        m_Player_SwitchCamera = m_Player.FindAction("SwitchCamera", throwIfNotFound: true);
        m_Player_Speed = m_Player.FindAction("Speed", throwIfNotFound: true);
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_Jump = m_PlayerAction.FindAction("Jump", throwIfNotFound: true);
        m_PlayerAction_Sit = m_PlayerAction.FindAction("Sit", throwIfNotFound: true);
        m_PlayerAction_Interact = m_PlayerAction.FindAction("Interact", throwIfNotFound: true);
        m_PlayerAction_Climb = m_PlayerAction.FindAction("Climb", throwIfNotFound: true);
        // WeaponAction
        m_WeaponAction = asset.FindActionMap("WeaponAction", throwIfNotFound: true);
        m_WeaponAction_RUnsheath = m_WeaponAction.FindAction("RUnsheath", throwIfNotFound: true);
        m_WeaponAction_RSheath = m_WeaponAction.FindAction("RSheath", throwIfNotFound: true);
        m_WeaponAction_LUnsheath = m_WeaponAction.FindAction("LUnsheath", throwIfNotFound: true);
        m_WeaponAction_LSheath = m_WeaponAction.FindAction("LSheath", throwIfNotFound: true);
        // ItemSwitchAction
        m_ItemSwitchAction = asset.FindActionMap("ItemSwitchAction", throwIfNotFound: true);
        m_ItemSwitchAction_Slot1 = m_ItemSwitchAction.FindAction("Slot1", throwIfNotFound: true);
        m_ItemSwitchAction_Slot2 = m_ItemSwitchAction.FindAction("Slot2", throwIfNotFound: true);
        m_ItemSwitchAction_Slot3 = m_ItemSwitchAction.FindAction("Slot3", throwIfNotFound: true);
        m_ItemSwitchAction_Slot4 = m_ItemSwitchAction.FindAction("Slot4", throwIfNotFound: true);
        m_ItemSwitchAction_Slot5 = m_ItemSwitchAction.FindAction("Slot5", throwIfNotFound: true);
        // PlayerGamePad
        m_PlayerGamePad = asset.FindActionMap("PlayerGamePad", throwIfNotFound: true);
        m_PlayerGamePad_Movement = m_PlayerGamePad.FindAction("Movement", throwIfNotFound: true);
        m_PlayerGamePad_Look = m_PlayerGamePad.FindAction("Look", throwIfNotFound: true);
        // PlayerCursorAction
        m_PlayerCursorAction = asset.FindActionMap("PlayerCursorAction", throwIfNotFound: true);
        m_PlayerCursorAction_Cursor = m_PlayerCursorAction.FindAction("Cursor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_MouseDownRight;
    private readonly InputAction m_Player_MouseDownLeft;
    private readonly InputAction m_Player_MouseLeftCombo;
    private readonly InputAction m_Player_MouseLook;
    private readonly InputAction m_Player_SwitchCamera;
    private readonly InputAction m_Player_Speed;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @MouseDownRight => m_Wrapper.m_Player_MouseDownRight;
        public InputAction @MouseDownLeft => m_Wrapper.m_Player_MouseDownLeft;
        public InputAction @MouseLeftCombo => m_Wrapper.m_Player_MouseLeftCombo;
        public InputAction @MouseLook => m_Wrapper.m_Player_MouseLook;
        public InputAction @SwitchCamera => m_Wrapper.m_Player_SwitchCamera;
        public InputAction @Speed => m_Wrapper.m_Player_Speed;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MouseDownRight.started += instance.OnMouseDownRight;
            @MouseDownRight.performed += instance.OnMouseDownRight;
            @MouseDownRight.canceled += instance.OnMouseDownRight;
            @MouseDownLeft.started += instance.OnMouseDownLeft;
            @MouseDownLeft.performed += instance.OnMouseDownLeft;
            @MouseDownLeft.canceled += instance.OnMouseDownLeft;
            @MouseLeftCombo.started += instance.OnMouseLeftCombo;
            @MouseLeftCombo.performed += instance.OnMouseLeftCombo;
            @MouseLeftCombo.canceled += instance.OnMouseLeftCombo;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @Speed.started += instance.OnSpeed;
            @Speed.performed += instance.OnSpeed;
            @Speed.canceled += instance.OnSpeed;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MouseDownRight.started -= instance.OnMouseDownRight;
            @MouseDownRight.performed -= instance.OnMouseDownRight;
            @MouseDownRight.canceled -= instance.OnMouseDownRight;
            @MouseDownLeft.started -= instance.OnMouseDownLeft;
            @MouseDownLeft.performed -= instance.OnMouseDownLeft;
            @MouseDownLeft.canceled -= instance.OnMouseDownLeft;
            @MouseLeftCombo.started -= instance.OnMouseLeftCombo;
            @MouseLeftCombo.performed -= instance.OnMouseLeftCombo;
            @MouseLeftCombo.canceled -= instance.OnMouseLeftCombo;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @Speed.started -= instance.OnSpeed;
            @Speed.performed -= instance.OnSpeed;
            @Speed.canceled -= instance.OnSpeed;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private List<IPlayerActionActions> m_PlayerActionActionsCallbackInterfaces = new List<IPlayerActionActions>();
    private readonly InputAction m_PlayerAction_Jump;
    private readonly InputAction m_PlayerAction_Sit;
    private readonly InputAction m_PlayerAction_Interact;
    private readonly InputAction m_PlayerAction_Climb;
    public struct PlayerActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerAction_Jump;
        public InputAction @Sit => m_Wrapper.m_PlayerAction_Sit;
        public InputAction @Interact => m_Wrapper.m_PlayerAction_Interact;
        public InputAction @Climb => m_Wrapper.m_PlayerAction_Climb;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sit.started += instance.OnSit;
            @Sit.performed += instance.OnSit;
            @Sit.canceled += instance.OnSit;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Climb.started += instance.OnClimb;
            @Climb.performed += instance.OnClimb;
            @Climb.canceled += instance.OnClimb;
        }

        private void UnregisterCallbacks(IPlayerActionActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sit.started -= instance.OnSit;
            @Sit.performed -= instance.OnSit;
            @Sit.canceled -= instance.OnSit;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Climb.started -= instance.OnClimb;
            @Climb.performed -= instance.OnClimb;
            @Climb.canceled -= instance.OnClimb;
        }

        public void RemoveCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);

    // WeaponAction
    private readonly InputActionMap m_WeaponAction;
    private List<IWeaponActionActions> m_WeaponActionActionsCallbackInterfaces = new List<IWeaponActionActions>();
    private readonly InputAction m_WeaponAction_RUnsheath;
    private readonly InputAction m_WeaponAction_RSheath;
    private readonly InputAction m_WeaponAction_LUnsheath;
    private readonly InputAction m_WeaponAction_LSheath;
    public struct WeaponActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public WeaponActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @RUnsheath => m_Wrapper.m_WeaponAction_RUnsheath;
        public InputAction @RSheath => m_Wrapper.m_WeaponAction_RSheath;
        public InputAction @LUnsheath => m_Wrapper.m_WeaponAction_LUnsheath;
        public InputAction @LSheath => m_Wrapper.m_WeaponAction_LSheath;
        public InputActionMap Get() { return m_Wrapper.m_WeaponAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActionActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponActionActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponActionActionsCallbackInterfaces.Add(instance);
            @RUnsheath.started += instance.OnRUnsheath;
            @RUnsheath.performed += instance.OnRUnsheath;
            @RUnsheath.canceled += instance.OnRUnsheath;
            @RSheath.started += instance.OnRSheath;
            @RSheath.performed += instance.OnRSheath;
            @RSheath.canceled += instance.OnRSheath;
            @LUnsheath.started += instance.OnLUnsheath;
            @LUnsheath.performed += instance.OnLUnsheath;
            @LUnsheath.canceled += instance.OnLUnsheath;
            @LSheath.started += instance.OnLSheath;
            @LSheath.performed += instance.OnLSheath;
            @LSheath.canceled += instance.OnLSheath;
        }

        private void UnregisterCallbacks(IWeaponActionActions instance)
        {
            @RUnsheath.started -= instance.OnRUnsheath;
            @RUnsheath.performed -= instance.OnRUnsheath;
            @RUnsheath.canceled -= instance.OnRUnsheath;
            @RSheath.started -= instance.OnRSheath;
            @RSheath.performed -= instance.OnRSheath;
            @RSheath.canceled -= instance.OnRSheath;
            @LUnsheath.started -= instance.OnLUnsheath;
            @LUnsheath.performed -= instance.OnLUnsheath;
            @LUnsheath.canceled -= instance.OnLUnsheath;
            @LSheath.started -= instance.OnLSheath;
            @LSheath.performed -= instance.OnLSheath;
            @LSheath.canceled -= instance.OnLSheath;
        }

        public void RemoveCallbacks(IWeaponActionActions instance)
        {
            if (m_Wrapper.m_WeaponActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponActionActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponActionActions @WeaponAction => new WeaponActionActions(this);

    // ItemSwitchAction
    private readonly InputActionMap m_ItemSwitchAction;
    private List<IItemSwitchActionActions> m_ItemSwitchActionActionsCallbackInterfaces = new List<IItemSwitchActionActions>();
    private readonly InputAction m_ItemSwitchAction_Slot1;
    private readonly InputAction m_ItemSwitchAction_Slot2;
    private readonly InputAction m_ItemSwitchAction_Slot3;
    private readonly InputAction m_ItemSwitchAction_Slot4;
    private readonly InputAction m_ItemSwitchAction_Slot5;
    public struct ItemSwitchActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public ItemSwitchActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Slot1 => m_Wrapper.m_ItemSwitchAction_Slot1;
        public InputAction @Slot2 => m_Wrapper.m_ItemSwitchAction_Slot2;
        public InputAction @Slot3 => m_Wrapper.m_ItemSwitchAction_Slot3;
        public InputAction @Slot4 => m_Wrapper.m_ItemSwitchAction_Slot4;
        public InputAction @Slot5 => m_Wrapper.m_ItemSwitchAction_Slot5;
        public InputActionMap Get() { return m_Wrapper.m_ItemSwitchAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ItemSwitchActionActions set) { return set.Get(); }
        public void AddCallbacks(IItemSwitchActionActions instance)
        {
            if (instance == null || m_Wrapper.m_ItemSwitchActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ItemSwitchActionActionsCallbackInterfaces.Add(instance);
            @Slot1.started += instance.OnSlot1;
            @Slot1.performed += instance.OnSlot1;
            @Slot1.canceled += instance.OnSlot1;
            @Slot2.started += instance.OnSlot2;
            @Slot2.performed += instance.OnSlot2;
            @Slot2.canceled += instance.OnSlot2;
            @Slot3.started += instance.OnSlot3;
            @Slot3.performed += instance.OnSlot3;
            @Slot3.canceled += instance.OnSlot3;
            @Slot4.started += instance.OnSlot4;
            @Slot4.performed += instance.OnSlot4;
            @Slot4.canceled += instance.OnSlot4;
            @Slot5.started += instance.OnSlot5;
            @Slot5.performed += instance.OnSlot5;
            @Slot5.canceled += instance.OnSlot5;
        }

        private void UnregisterCallbacks(IItemSwitchActionActions instance)
        {
            @Slot1.started -= instance.OnSlot1;
            @Slot1.performed -= instance.OnSlot1;
            @Slot1.canceled -= instance.OnSlot1;
            @Slot2.started -= instance.OnSlot2;
            @Slot2.performed -= instance.OnSlot2;
            @Slot2.canceled -= instance.OnSlot2;
            @Slot3.started -= instance.OnSlot3;
            @Slot3.performed -= instance.OnSlot3;
            @Slot3.canceled -= instance.OnSlot3;
            @Slot4.started -= instance.OnSlot4;
            @Slot4.performed -= instance.OnSlot4;
            @Slot4.canceled -= instance.OnSlot4;
            @Slot5.started -= instance.OnSlot5;
            @Slot5.performed -= instance.OnSlot5;
            @Slot5.canceled -= instance.OnSlot5;
        }

        public void RemoveCallbacks(IItemSwitchActionActions instance)
        {
            if (m_Wrapper.m_ItemSwitchActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IItemSwitchActionActions instance)
        {
            foreach (var item in m_Wrapper.m_ItemSwitchActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ItemSwitchActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ItemSwitchActionActions @ItemSwitchAction => new ItemSwitchActionActions(this);

    // PlayerGamePad
    private readonly InputActionMap m_PlayerGamePad;
    private List<IPlayerGamePadActions> m_PlayerGamePadActionsCallbackInterfaces = new List<IPlayerGamePadActions>();
    private readonly InputAction m_PlayerGamePad_Movement;
    private readonly InputAction m_PlayerGamePad_Look;
    public struct PlayerGamePadActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerGamePadActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerGamePad_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerGamePad_Look;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGamePad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGamePadActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerGamePadActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IPlayerGamePadActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IPlayerGamePadActions instance)
        {
            if (m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerGamePadActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerGamePadActions @PlayerGamePad => new PlayerGamePadActions(this);

    // PlayerCursorAction
    private readonly InputActionMap m_PlayerCursorAction;
    private List<IPlayerCursorActionActions> m_PlayerCursorActionActionsCallbackInterfaces = new List<IPlayerCursorActionActions>();
    private readonly InputAction m_PlayerCursorAction_Cursor;
    public struct PlayerCursorActionActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerCursorActionActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cursor => m_Wrapper.m_PlayerCursorAction_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCursorAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCursorActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerCursorActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerCursorActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerCursorActionActionsCallbackInterfaces.Add(instance);
            @Cursor.started += instance.OnCursor;
            @Cursor.performed += instance.OnCursor;
            @Cursor.canceled += instance.OnCursor;
        }

        private void UnregisterCallbacks(IPlayerCursorActionActions instance)
        {
            @Cursor.started -= instance.OnCursor;
            @Cursor.performed -= instance.OnCursor;
            @Cursor.canceled -= instance.OnCursor;
        }

        public void RemoveCallbacks(IPlayerCursorActionActions instance)
        {
            if (m_Wrapper.m_PlayerCursorActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerCursorActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerCursorActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerCursorActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerCursorActionActions @PlayerCursorAction => new PlayerCursorActionActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMouseDownRight(InputAction.CallbackContext context);
        void OnMouseDownLeft(InputAction.CallbackContext context);
        void OnMouseLeftCombo(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnSwitchCamera(InputAction.CallbackContext context);
        void OnSpeed(InputAction.CallbackContext context);
    }
    public interface IPlayerActionActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnSit(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnClimb(InputAction.CallbackContext context);
    }
    public interface IWeaponActionActions
    {
        void OnRUnsheath(InputAction.CallbackContext context);
        void OnRSheath(InputAction.CallbackContext context);
        void OnLUnsheath(InputAction.CallbackContext context);
        void OnLSheath(InputAction.CallbackContext context);
    }
    public interface IItemSwitchActionActions
    {
        void OnSlot1(InputAction.CallbackContext context);
        void OnSlot2(InputAction.CallbackContext context);
        void OnSlot3(InputAction.CallbackContext context);
        void OnSlot4(InputAction.CallbackContext context);
        void OnSlot5(InputAction.CallbackContext context);
    }
    public interface IPlayerGamePadActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IPlayerCursorActionActions
    {
        void OnCursor(InputAction.CallbackContext context);
    }
}
